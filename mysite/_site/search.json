[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Picking where to live",
    "section": "",
    "text": "REGION\npersonal.income\nMedian.Rent\nmedian.sale.price\nWalkable\nUnemployment\nPurchase_power_100_dollars\nLatitude\nLongitude\nPolitical_Affiliation\nYear_Fahrenheit\nViolent_Crime_Rate_per_100k\nNon_Violent_Crime_Rate_per_100k\n\n\n\n\n0\nAtlanta\n0.145435\n0.244568\n0.200903\n0.302069\n0.258065\n0.747856\n33.7490\n-84.3880\nD\n62.6\n0.603151\n0.705136\n\n\n1\nAustin\n0.303252\n0.178534\n0.307280\n0.310345\n0.483871\n0.707976\n30.2672\n-97.7431\nD\n69.3\n0.262020\n0.368896\n\n\n2\nBaltimore\n0.250240\n0.195090\n0.165350\n0.237241\n0.193548\n0.505146\n39.2904\n-76.6122\nD\n55.6\n0.807988\n0.737275\n\n\n3\nBoston\n0.575018\n0.931803\n0.475169\n0.645517\n0.354839\n0.331046\n42.3601\n-71.0589\nD\n51.7\n0.124295\n0.135701\n\n\n4\nCharlotte\n0.160468\n0.173267\n0.209932\n0.333793\n0.451613\n0.860635\n35.2271\n-80.8431\nD\n60.9\n0.298170\n0.501457"
  },
  {
    "objectID": "plot_attempt_2.html",
    "href": "plot_attempt_2.html",
    "title": "Picking where to live",
    "section": "",
    "text": "import dash\nfrom dash import dcc, html\nfrom dash.dependencies import Input, Output\nimport plotly.express as px\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport geopandas as gpd\n\n\nus_states=gpd.read_file(\"../final_data/tl_2020_us_state.shp\")\n\n\ndf = pd.read_csv(\"../final_data/final_data.csv\")\n\n# Initialize the Dash app\napp = dash.Dash(__name__)\n\n\ncolumns_to_normalize = ['personal.income', 'Median.Rent', 'median.sale.price',\n                        'Walkable', 'Unemployment', 'Purchase_power_100_dollars',\n                        'Violent_Crime_Rate_per_100k', 'Non_Violent_Crime_Rate_per_100k']\n\n\nscaler = MinMaxScaler()\ndf[columns_to_normalize] = scaler.fit_transform(df[columns_to_normalize])\n\n\ndf.head()\n\n\n\n\n\n\n\n\n\nREGION\npersonal.income\nMedian.Rent\nmedian.sale.price\nWalkable\nUnemployment\nPurchase_power_100_dollars\nLatitude\nLongitude\nPolitical_Affiliation\nYear_Fahrenheit\nViolent_Crime_Rate_per_100k\nNon_Violent_Crime_Rate_per_100k\n\n\n\n\n0\nAtlanta\n0.145435\n0.244568\n0.200903\n0.302069\n0.258065\n0.747856\n33.7490\n-84.3880\nD\n62.6\n0.603151\n0.705136\n\n\n1\nAustin\n0.303252\n0.178534\n0.307280\n0.310345\n0.483871\n0.707976\n30.2672\n-97.7431\nD\n69.3\n0.262020\n0.368896\n\n\n2\nBaltimore\n0.250240\n0.195090\n0.165350\n0.237241\n0.193548\n0.505146\n39.2904\n-76.6122\nD\n55.6\n0.807988\n0.737275\n\n\n3\nBoston\n0.575018\n0.931803\n0.475169\n0.645517\n0.354839\n0.331046\n42.3601\n-71.0589\nD\n51.7\n0.124295\n0.135701\n\n\n4\nCharlotte\n0.160468\n0.173267\n0.209932\n0.333793\n0.451613\n0.860635\n35.2271\n-80.8431\nD\n60.9\n0.298170\n0.501457\n\n\n\n\n\n\n\n\n\n# Define the layout of the app\napp.layout = html.Div([\n    html.H1(\"Choosing Where to Live\",style={\"color\": \"white\"}),\n    html.Div([\n        html.Label(\"Importance of Rent\",style={\"color\": \"white\"}),\n        dcc.Slider(\n            id=\"Median Rent\",\n            min=0,\n            max=1,\n            step=0.1,\n            value=0.5,\n            marks={i/10: str(i/10) for i in range(11)},\n            tooltip={\"always_visible\": False, \"placement\": \"bottom\"}\n        ),\n        html.Label(\"Importance of Income\",style={\"color\": \"white\"}),\n        dcc.Slider(\n            id=\"Personal Income\",\n            min=0,\n            max=1,\n            step=0.1,\n            value=0.5,\n            marks={i/10: str(i/10) for i in range(11)},\n            tooltip={\"always_visible\": False, \"placement\": \"bottom\"}\n        ),\n        html.Label(\"Importance of Home Sale Price\",style={\"color\": \"white\"}),\n        dcc.Slider(\n            id=\"Median Sale Price\",\n            min=0,\n            max=1,\n            step=0.1,\n            value=0.5,\n            marks={i/10: str(i/10) for i in range(11)},\n            tooltip={\"always_visible\": False, \"placement\": \"bottom\"}\n        ),\n        html.Label(\"Importance of Walkablity\",style={\"color\": \"white\"}),\n        dcc.Slider(\n            id=\"Walkable\",\n            min=0,\n            max=1,\n            step=0.1,\n            value=0.5,\n            marks={i/10: str(i/10) for i in range(11)},\n            tooltip={\"always_visible\": False, \"placement\": \"bottom\"}\n        ),\n        html.Label(\"Importance of Job Security and Opportunity\",style={\"color\": \"white\"}),\n        dcc.Slider(\n            id=\"Unemployment\",\n            min=0,\n            max=1,\n            step=0.1,\n            value=0.5,\n            marks={i/10: str(i/10) for i in range(11)},\n            tooltip={\"always_visible\": False, \"placement\": \"bottom\"}\n        ),\n        html.Label(\"Importance of Purchasing Power\",style={\"color\": \"white\"}),\n        dcc.Slider(\n            id=\"Purchasing Power\",\n            min=0,\n            max=1,\n            step=0.1,\n            value=0.5,\n            marks={i/10: str(i/10) for i in range(11)},\n            tooltip={\"always_visible\": False, \"placement\": \"bottom\"}\n        ),\n        html.Label(\"Importance of Violent Crime Rate\",style={\"color\": \"white\"}),\n        dcc.Slider(\n            id=\"Crime Rate\",\n            min=0,\n            max=1,\n            step=0.1,\n            value=0.5,\n            marks={i/10: str(i/10) for i in range(11)},\n            tooltip={\"always_visible\": False, \"placement\": \"bottom\"}\n        ),\n        # Repeat this pattern for other variables\n    ], style={\"width\": \"50%\", \"margin\": \"auto\"}),\n    dcc.Graph(id=\"city-graph\")\n])\n\n# Define callback to update the graph based on user input\n@app.callback(\n    Output(\"city-graph\", \"figure\"),\n    [Input(\"Median Rent\", \"value\"),\n     Input(\"Personal Income\", \"value\"),\n     Input(\"Median Sale Price\",\"value\"),\n     Input(\"Walkable\",\"value\"),\n     Input(\"Unemployment\",\"value\"),\n     Input(\"Purchasing Power\",\"value\"),\n     Input(\"Crime Rate\",\"value\")])\n    # Add more Inputs for other variables\ndef update_graph(importance_personal_income, importance_median_rent,importance_median_sale_price,importance_walkable,importance_unemployment,importance_purchasing_power,importance_crime):\n    # Weighted sum of variables\n    df[\"Weighted_Sum\"] = (df[\"Median.Rent\"] * importance_personal_income +\n                          df[\"personal.income\"] * importance_median_rent + df[\"median.sale.price\"]*importance_median_sale_price +df[\"Walkable\"]*importance_walkable+df[\"Unemployment\"]*importance_unemployment+\n                          df[\"Purchase_power_100_dollars\"]*importance_purchasing_power+df[\"Violent_Crime_Rate_per_100k\"]*importance_crime)\n    \n    # Define color scale mapping each political affiliation to a specific color\n    color_scale = {\n        \"D\": \"blue\",\n        \"R\": \"red\",\n        \"I\": \"yellow\",\n        \"Nonpartisan\": \"grey\"\n    }\n    \n    # Plotly scatter plot\n    fig = px.scatter_geo(df, lat='Latitude', lon='Longitude', scope='usa', size=\"Weighted_Sum\", color=\"Political_Affiliation\",\n                         color_discrete_map=color_scale, custom_data=[\"REGION\", \"Weighted_Sum\"])\n    \n    fig.update_layout(title=\"City Data Visualization on US Map\",\n                      mapbox_style=\"carto-positron\",\n                      mapbox_zoom=3,\n                      mapbox_center={\"lat\": 37.0902, \"lon\": -95.7129})\n    \n    fig.update_traces(hovertemplate='&lt;b&gt;%{customdata[0]}&lt;/b&gt;&lt;br&gt;Weighted Sum: %{customdata[1]:.2f}')\n    \n    return fig\n# Run the app\nif __name__ == \"__main__\":\n    app.run_server(debug=True,port=8052)"
  }
]